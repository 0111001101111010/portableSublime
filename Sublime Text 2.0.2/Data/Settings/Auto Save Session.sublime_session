{
	"folder_history":
	[
	],
	"last_window_id": 1,
	"settings":
	{
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"contents": "// partial_sort() implementation for std::list<int> based on suggestion\n// by Scott Meyers in Effective STL, item 31.\n//\n// See <http://stackoverflow.com/questions/9220750>.\n \n#include <cstddef>\n#include <list>\n#include <iostream>\n#include <set>\n \n// Perdicate for sorting iterators based on their item's value.\nstruct iterator_less\n{   \n    bool operator() (std::list<int>::iterator lhs,\n                     std::list<int>::iterator rhs) const\n    {\n        return (*lhs < *rhs);\n    }\n};\n \n// Sorted container (with duplicates) that sorts iterators\n// based on their item's value (see 'iterator_less').\ntypedef std::multiset<\n        std::list<int>::iterator, iterator_less\n    > iterator_set;\n \nvoid partial_sort(std::list<int>& items, std::size_t n)\n{\n    // Build a set of iterators to the items, sorting\n    // the them based on their item's value.\n    iterator_set sorted;\n    for (auto item = items.begin(); item!=items.end(); ++item)\n    {\n        // This is actually inserting an iterator that points\n        // to the item rather than copying the item's value.\n        sorted.insert(item);\n    }\n \n    // Move up to 'n' items from the sorted set to the\n    // front of the list by \"splicing\" them at successive\n    // positions starting with the smallest.\n    auto position = items.begin();\n    auto item = sorted.begin();\n    for (std::size_t i=0; i<n && item!=sorted.end(); ++i)\n    {\n        // Move the next item into the ith position.\n        items.splice(position, items, *item);\n \n        // Move 'position' to the (i+1)th position\n        // in the list for the next iteration, and\n        // move 'next' to the (i+1)th smallest item.\n        position = *item, ++position, ++item;\n    }\n}\n \nint main ()\n{\n    std::list<int> items;\n    items.push_back(11);\n    items.push_back(2);\n    items.push_back(3);\n    items.push_back(99);\n    items.push_back(1);\n    items.push_back(4);\n    items.push_back(5);\n    items.push_back(7);\n    items.push_back(34);\n \n    partial_sort(items, 3);\n \n    for (auto item=items.begin(); item!=items.end(); ++item)\n    {\n        std::cout << *item << std::endl;\n    }\n}// partial_sort() implementation for std::list<int> based on suggestion\n// by Scott Meyers in Effective STL, item 31.\n//\n// See <http://stackoverflow.com/questions/9220750>.\n \n#include <cstddef>\n#include <list>\n#include <iostream>\n#include <set>\n \n// Perdicate for sorting iterators based on their item's value.\nstruct iterator_less\n{   \n    bool operator() (std::list<int>::iterator lhs,\n                     std::list<int>::iterator rhs) const\n    {\n        return (*lhs < *rhs);\n    }\n};\n \n// Sorted container (with duplicates) that sorts iterators\n// based on their item's value (see 'iterator_less').\ntypedef std::multiset<\n        std::list<int>::iterator, iterator_less\n    > iterator_set;\n \nvoid partial_sort(std::list<int>& items, std::size_t n)\n{\n    // Build a set of iterators to the items, sorting\n    // the them based on their item's value.\n    iterator_set sorted;\n    for (auto item = items.begin(); item!=items.end(); ++item)\n    {\n\n        \n        // This is actually inserting an iterator that points\n        // to the item rather than copying the item's value.\n        sorted.insert(item);\n    }\n \n    // Move up to 'n' items from the sorted set to the\n    // front of the list by \"splicing\" them at successive\n    // positions starting with the smallest.\n    auto position = items.begin();\n    auto item = sorted.begin();\n    for (std::size_t i=0; i<n && item!=sorted.end(); ++i)\n    {\n        // Move the next item into the ith position.\n        items.splice(position, items, *item);\n \n        // Move 'position' to the (i+1)th position\n        // in the list for the next iteration, and\n        // move 'next' to the (i+1)th smallest item.\n        position = *item, ++position, ++item;\n    }\n}\n \nint main ()\n{\n    std::list<int> items;\n    items.push_back(11);\n    items.push_back(2);\n    items.push_back(3);\n    items.push_back(99);\n    items.push_back(1);\n    items.push_back(4);\n    items.push_back(5);\n    items.push_back(7);\n    items.push_back(34);\n \n    partial_sort(items, 3);\n \n    for (auto item=items.begin(); item!=items.end(); ++item)\n    {\n        std::cout << *item << std::endl;\n    }\n}",
					"file": "/F/Projects/bookexercises/Samples/lists.cpp",
					"file_size": 4382,
					"file_write_time": 130188198660000000,
					"settings":
					{
						"buffer_size": 4244,
						"line_ending": "Windows",
						"name": "// partial_sort() implementation for std::list<int"
					}
				}
			],
			"build_system": "Packages/C++/C++.sublime-build",
			"command_palette":
			{
				"height": 58.0,
				"selected_items":
				[
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"snippe",
						"Snippet: Lorem ipsum"
					],
					[
						"package install",
						"Package Control: Install Package"
					]
				],
				"width": 400.0
			},
			"console":
			{
				"height": 125.0
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
			],
			"find":
			{
				"height": 0.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/F/Projects/bookexercises/Samples/lists.cpp",
							"settings":
							{
								"buffer_size": 4244,
								"regions":
								{
								},
								"selection":
								[
									[
										2873,
										2873
									]
								],
								"settings":
								{
									"auto_name": "// partial_sort() implementation for std::list<int",
									"incomplete_sync": null,
									"remote_loading": false,
									"synced": false,
									"syntax": "Packages/C++/C++.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3623.0,
								"zoom_level": 1.0
							},
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 0.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 100.0
			},
			"output.sftp":
			{
				"height": 0.0
			},
			"position": "0,2,3,-1,-1,-1,-1,815,2478,277,3134",
			"replace":
			{
				"height": 0.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"window_id": 1,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
